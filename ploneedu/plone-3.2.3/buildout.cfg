############################################
#
# Buildout Configuration File for ZEO Plone
# -----------------------------------------
# $LastChangedDate: 2009-06-29 08:49:26 -0700 (Mon, 29 Jun 2009) $ $LastChangedRevision: 25769M $
#
# After making changes in this configuration file,
# you should run bin/buildout to update the components.
# 
# ALWAYS back up all Plone/Zope data and components
# before changing configuration.
# 
# Running "bin/buildout" will update your installation,
# installing missing components as necessary.
# 
# Use "bin/buildout -n" to update all components,
# including Plone, to the newest available releases.
# Generally, you only want to do that as part
# of a planned migration.
#
# Tutorial instructions for using zc.buildout for
# configuration management are available at:
# http://plone.org/documentation/tutorial/buildout
# Full details at http://pypi.python.org/pypi/zc.buildout
#
############################################


[buildout]


############################################
# Plone Component Versions
# ------------------------
# This version of the Unified Installer has the components
# of Plone 3.2.3 preloaded so that it can install without
# an Internet connection.
# If you want to update, uncomment the "extends = http://..." below,
# edit it to point to the current version URL,
# comment out the "extends = versions.cfg" line
# and run bin/buildout -n
# while attached to the Internet.
#
# extends = http://dist.plone.org/release/3.2.3/versions.cfg
extends = versions.cfg
versions = versions

extensions =
    buildout.dumppickedversions

############################################
# Ports
# -----
# Specify the ports on which your Zope installation
# will listen.
# ZEO Servers
zeo-address = 127.0.0.1:11100
# zeo-sites1-address = 127.0.0.1:11101
# zeo-sites2-address = 127.0.0.1:11102
# zeo-sites3-address = 127.0.0.1:11103
# zeo-sites4-address = 127.0.0.1:11104
# zeo-sites5-address = 127.0.0.1:11105
# zeo-sites6-address = 127.0.0.1:11106
# Zope client2
client1-address = 11080
# client2-address = 11081
# client3-address = 11082
# client4-address = 11083
# client5-address = 11084


############################################
# Eggs
# ----
# Add an indented line to the eggs section for any Python
# eggs or packages you wish to include.
#
eggs =
    Plone

#
# Optional Functionality
# ----------------------
# Uncomment the indented lines to include these products.
# Documentation on all of them, along with many more products,
# is available at
# http://plone.org/products/
#
# Commonly used products:
# * LinguaPlone provides tools for building multi-lingual sites
# * Products.CacheSetup adds the "CacheFu" Plone speedup kit
# * PloneHelpCenter is a simple knowledge base
# * PloneFormGen provides through-the-web form building
#
#    Products.LinguaPlone
    Products.CacheSetup
#    Products.PloneHelpCenter
    Products.PloneFormGen
#
# Commonly used development tools:
# * Clouseau uses AJAX to provide a Python prompt inside Plone
# * DocFinderTab puts an object documentation inspector in the Zope Management Interface
# * Gloworm is a Firebug-like viewlet inspector and customizer
# * plone.reload allows you to refresh Python code and ZCML configuration
#   without restarting Zope. Note that to use plone.reload, you'll also
#   need to uncomment the "zcml" entry for it below.
#
    Products.Clouseau
    Products.DocFinderTab
    Products.Gloworm
    plone.reload
    Products.PloneLDAP
    Products.Poi
#    uwosh.themecollege
#    uwosh.themebase
#    uwosh.core
#    uwosh.default
#    uwosh.requirements
#    uwosh.bulletin
#    Products.UWOshSuccess
    Products.ImageEditor
    Products.CalendarX
    Products.ATVocabularyManager
    Products.ContentWellPortlets
    Products.Collage
    Products.QuickImporter
#    Products.FCKeditor
    Products.TinyMCE
    Products.ATSuccessStory
    Products.Ploneboard
    collective.uploadify    
    collective.keywordcondition
    collective.easyslider
    collective.plonetruegallery
#    collective.lineage
    collective.portlet.tal
    collective.recaptcha
#    collective.xdv
    collective.fancyzoomview
    plone.app.changeownership
    uwosh.flash
    uwosh.timeslot
    uwosh.pfg.d2c
    uwosh.northstar
    uwosh.simpleemergency
    webcouturier.dropdownmenu
    ZopeSkel
    Paste
#    PIL
    PILwoTk

############################################
# ZCML Slugs
# ----------
# Some eggs need ZCML slugs to tell Zope to
# use them. Eggs with names beginning with "Products."
# usually don't need this.
zcml =
    plone.reload
#    uwosh.themecollege
#    uwosh.themebase
#    uwosh.core
#    uwosh.default
#    uwosh.requirements
#    uwosh.bulletin
    collective.uploadify
    collective.keywordcondition
    collective.easyslider
    collective.plonetruegallery
    collective.portlet.tal
#    collective.lineage
    collective.recaptcha
#    collective.xdv
    collective.fancyzoomview
    plone.app.changeownership
    uwosh.flash
    uwosh.timeslot
    uwosh.pfg.d2c
    uwosh.northstar
    uwosh.simpleemergency
    webcouturier.dropdownmenu

############################################
# Development Eggs
# ----------------
# You can use paster to create "development eggs" to
# develop new products/themes. Put these in the src/
# directory.
# You will also need to add the egg names in the
# eggs section above, and may also need to add them
# to the zcml section.
#
# Provide the *paths* to the eggs you are developing here:
develop =
#    src/my.package


############################################
# Debug Mode
# ----------
# Change debug-mode to "on" to run in development mode.
# 
debug-mode = off
# Add-on developers should turn deprecation warnings on
deprecation-warnings = off
# change verbose-security to "on" for useful security errors while developing
verbose-security = off


############################################
############################################
# Buildout instructions beyond this point are
# usually only changed by experienced developers.
#
# Beyond here there be dragons!


#eggs-directory=/opt/Plone-3.2.3/buildout-cache/eggs
#download-cache=/opt/Plone-3.2.3/buildout-cache/downloads
newest = false
parts =
    zope2
    productdistros
    zeoserver
#     zeoserver-sites1
#     zeoserver-sites2
#     zeoserver-sites3
#     zeoserver-sites4
#     zeoserver-sites5
#     zeoserver-sites6
    client1
#     client2
#     client3
#     client4
#     client5
    zopepy
    zopeskel
    precompile
    chown
    unifiedinstaller
    flash
    atcontenttypes-conf1
#     atcontenttypes-conf2
#     atcontenttypes-conf3
#     atcontenttypes-conf4
#     atcontenttypes-conf5
#    pil

# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
find-links =
    http://www.uwosh.edu/ploneprojects/software/simple
    http://www.uwosh.edu/ploneprojects/resources/basket/basket_view
    http://pypi.it.uwosh.edu/
    http://dist.plone.org
    http://download.zope.org/ppix/
    http://download.zope.org/distribution/
    http://effbot.org/downloads


# unzip all eggs for easier debugging
unzip = true

# let's share our Zope install
#zope-directory = /opt/Plone-3.2.3


# This section installs the components of Zope 2.
# Zope operating instances are created elsewhere.
# For options see http://pypi.python.org/pypi/plone.recipe.zope2install
[zope2]
recipe = plone.recipe.zope2install
# update zope by updating this URL:
url = http://www.zope.org/Products/Zope/2.10.7/Zope-2.10.7-final.tgz
# fake eggs are required to satisfy Zope dependencies while
# zope is not yet eggified.
fake-zope-eggs = true
additional-fake-eggs =
    ZConfig
    pytz


# Use this section to download additional old-style products.
# List any number of URLs for product tarballs under URLs (separate
# with whitespace, or break over several lines, with subsequent lines
# indented). If any archives contain several products inside a top-level
# directory, list the archive file name (i.e. the last part of the URL, 
# normally with a .tar.gz suffix or similar) under 'nested-packages'.
# If any archives extract to a product directory with a version suffix, list
# the archive name under 'version-suffix-packages'.
# For options see http://pypi.python.org/pypi/plone.recipe.distros
[productdistros]
recipe = plone.recipe.distros
urls =
nested-packages =
version-suffix-packages = 


# Use this section to install and configure a Zope
# Enterprise Objects server.
# For options see http://pypi.python.org/pypi/plone.recipe.zope2zeoserver
[zeoserver]
recipe = plone.recipe.zope2zeoserver
zope2-location = ${zope2:location}
zeo-address = ${buildout:zeo-address}
#effective-user = zeo
# Put the log, pid and socket files in var/zeoserver
zeo-log     = ${buildout:directory}/var/zeoserver/zeoserver.log
pid-file    = ${buildout:directory}/var/zeoserver/zeoserver.pid
socket-name = ${buildout:directory}/var/zeoserver/zeo.zdsock

# [zeoserver-sites1]
# recipe = plone.recipe.zope2zeoserver
# zope2-location = ${zope2:location}
# zeo-address = ${buildout:zeo-sites1-address}
# effective-user = zeo
# # Put the log, pid and socket files in var/zeoserver
# zeo-log     = ${buildout:directory}/var/zeoserver/zeoserver-sites1.log
# pid-file    = ${buildout:directory}/var/zeoserver/zeoserver-sites1.pid
# socket-name = ${buildout:directory}/var/zeoserver/zeo-sites1.zdsock
# file-storage = ${buildout:directory}/var/filestorage/Sites1.fs
# storage-number = sites1

# [zeoserver-sites2]
# recipe = plone.recipe.zope2zeoserver
# zope2-location = ${zope2:location}
# zeo-address = ${buildout:zeo-sites2-address}
# effective-user = zeo
# # Put the log, pid and socket files in var/zeoserver
# zeo-log     = ${buildout:directory}/var/zeoserver/zeoserver-sites2.log
# pid-file    = ${buildout:directory}/var/zeoserver/zeoserver-sites2.pid
# socket-name = ${buildout:directory}/var/zeoserver/zeo-sites2.zdsock
# file-storage = ${buildout:directory}/var/filestorage/Sites2.fs
# storage-number = sites2

# [zeoserver-sites3]
# recipe = plone.recipe.zope2zeoserver
# zope2-location = ${zope2:location}
# zeo-address = ${buildout:zeo-sites3-address}
# effective-user = zeo
# # Put the log, pid and socket files in var/zeoserver
# zeo-log     = ${buildout:directory}/var/zeoserver/zeoserver-sites3.log
# pid-file    = ${buildout:directory}/var/zeoserver/zeoserver-sites3.pid
# socket-name = ${buildout:directory}/var/zeoserver/zeo-sites3.zdsock
# file-storage = ${buildout:directory}/var/filestorage/Sites3.fs
# storage-number = sites3

# [zeoserver-sites4]
# recipe = plone.recipe.zope2zeoserver
# zope2-location = ${zope2:location}
# zeo-address = ${buildout:zeo-sites4-address}
# effective-user = zeo
# # Put the log, pid and socket files in var/zeoserver
# zeo-log     = ${buildout:directory}/var/zeoserver/zeoserver-sites4.log
# pid-file    = ${buildout:directory}/var/zeoserver/zeoserver-sites4.pid
# socket-name = ${buildout:directory}/var/zeoserver/zeo-sites4.zdsock
# file-storage = ${buildout:directory}/var/filestorage/Sites4.fs
# storage-number = sites4

# [zeoserver-sites5]
# recipe = plone.recipe.zope2zeoserver
# zope2-location = ${zope2:location}
# zeo-address = ${buildout:zeo-sites5-address}
# effective-user = zeo
# # Put the log, pid and socket files in var/zeoserver
# zeo-log     = ${buildout:directory}/var/zeoserver/zeoserver-sites5.log
# pid-file    = ${buildout:directory}/var/zeoserver/zeoserver-sites5.pid
# socket-name = ${buildout:directory}/var/zeoserver/zeo-sites5.zdsock
# file-storage = ${buildout:directory}/var/filestorage/Sites5.fs
# storage-number = sites5

# [zeoserver-sites6]
# recipe = plone.recipe.zope2zeoserver
# zope2-location = ${zope2:location}
# zeo-address = ${buildout:zeo-sites6-address}
# effective-user = zeo
# # Put the log, pid and socket files in var/zeoserver
# zeo-log     = ${buildout:directory}/var/zeoserver/zeoserver-sites6.log
# pid-file    = ${buildout:directory}/var/zeoserver/zeoserver-sites6.pid
# socket-name = ${buildout:directory}/var/zeoserver/zeo-sites6.zdsock
# file-storage = ${buildout:directory}/var/filestorage/Sites6.fs
# storage-number = sites6


# Use this section to install and configure a Zope
# client instance.
# For options see http://pypi.python.org/pypi/plone.recipe.zope2instance
[client1]
recipe = plone.recipe.zope2instance
zope2-location = ${zope2:location}
zeo-client = true
zeo-address = ${zeoserver:zeo-address}
# The line below sets only the initial password. It will not change an
# existing password.
user = ploneadmin:xxxxxx
http-address = ${buildout:client1-address}
#effective-user = plone
# change debug-mode to "on" to run in development mode
debug-mode = ${buildout:debug-mode}
# change verbose-security to "on" for detailed security
# errors while developing
verbose-security = ${buildout:verbose-security}
deprecation-warnings = ${buildout:deprecation-warnings}
# Put the log, pid, lock files in var/client1
event-log = ${buildout:directory}/var/client1/event.log
z2-log    = ${buildout:directory}/var/client1/Z2.log
pid-file  = ${buildout:directory}/var/client1/client1.pid
lock-file = ${buildout:directory}/var/client1/client1.lock


# If you want Zope to know about any additional eggs, list them here.
# e.g. eggs = ${buildout:eggs} my.package
eggs =
    ${buildout:eggs}


# If you want to register ZCML slugs for any packages, list them here.
# e.g. zcml = my.package my.other.package
zcml = 
    ${buildout:zcml}

    
# products =
#     ${buildout:directory}/products
#     ${productdistros:location}


# You may also control the environment variables for the instance.
environment-vars =
    PYTHON_EGG_CACHE ${buildout:directory}/var/.python-eggs

# zope-conf-additional =
#  <zodb_db sites1>
#     <zeoclient>
#       server ${buildout:zeo-sites1-address}
#       storage sites1
#       name sites1
#     </zeoclient>
#       mount-point /sites1
#  </zodb_db>
#  <zodb_db sites2>
#     <zeoclient>
#       server ${buildout:zeo-sites2-address}
#       storage sites2
#       name sites2
#     </zeoclient>
#       mount-point /sites2
#  </zodb_db>
#  <zodb_db sites3>
#     <zeoclient>
#       server ${buildout:zeo-sites3-address}
#       storage sites3
#       name sites3
#     </zeoclient>
#       mount-point /sites3
#  </zodb_db>
#  <zodb_db sites4>
#     <zeoclient>
#       server ${buildout:zeo-sites4-address}
#       storage sites4
#       name sites4
#     </zeoclient>
#       mount-point /sites4
#  </zodb_db>
#  <zodb_db sites5>
#     <zeoclient>
#       server ${buildout:zeo-sites5-address}
#       storage sites5
#       name sites5
#     </zeoclient>
#       mount-point /sites5
#  </zodb_db>
#  <zodb_db sites6>
#     <zeoclient>
#       server ${buildout:zeo-sites6-address}
#       storage sites6
#       name sites6
#     </zeoclient>
#       mount-point /sites6
#  </zodb_db>


# # client2 picks up nearly all its configuration
# # from client1. If you need to create a new client
# # stanza, you should be able to copy this (with a new part name),
# # changing only the parts with "client2" in them.
# # For options see http://pypi.python.org/pypi/collective.recipe.zope2cluster
# [client2]
# recipe = collective.recipe.zope2cluster
# instance-clone = client1
# # we only need to specify what's different from the clone instance.
# http-address = ${buildout:client2-address}
# # Put the log, pid, lock files in var/client2
# event-log = ${buildout:directory}/var/client2/event.log
# z2-log    = ${buildout:directory}/var/client2/Z2.log
# pid-file  = ${buildout:directory}/var/client2/client2.pid
# lock-file = ${buildout:directory}/var/client2/client2.lock
# zope-conf-additional = ${client1:zope-conf-additional}

# [client3]
# recipe = collective.recipe.zope2cluster
# instance-clone = client1
# # we only need to specify what's different from the clone instance.
# http-address = ${buildout:client3-address}
# # Put the log, pid, lock files in var/client3
# event-log = ${buildout:directory}/var/client3/event.log
# z2-log    = ${buildout:directory}/var/client3/Z2.log
# pid-file  = ${buildout:directory}/var/client3/client3.pid
# lock-file = ${buildout:directory}/var/client3/client3.lock
# zope-conf-additional = ${client1:zope-conf-additional}

# [client4]
# recipe = collective.recipe.zope2cluster
# instance-clone = client1
# # we only need to specify what's different from the clone instance.
# http-address = ${buildout:client4-address}
# # Put the log, pid, lock files in var/client4
# event-log = ${buildout:directory}/var/client4/event.log
# z2-log    = ${buildout:directory}/var/client4/Z2.log
# pid-file  = ${buildout:directory}/var/client4/client4.pid
# lock-file = ${buildout:directory}/var/client4/client4.lock
# zope-conf-additional = ${client1:zope-conf-additional}

# [client5]
# recipe = collective.recipe.zope2cluster
# instance-clone = client1
# # we only need to specify what's different from the clone instance.
# http-address = ${buildout:client5-address}
# # Put the log, pid, lock files in var/client5
# event-log = ${buildout:directory}/var/client5/event.log
# z2-log    = ${buildout:directory}/var/client5/Z2.log
# pid-file  = ${buildout:directory}/var/client5/client5.pid
# lock-file = ${buildout:directory}/var/client5/client5.lock
# zope-conf-additional = ${client1:zope-conf-additional}

# installs a zopepy python interpreter that runs with your
# full Zope environment
[zopepy]
recipe = zc.recipe.egg
eggs = ${client1:eggs}
interpreter = zopepy
extra-paths = ${zeoserver:zope2-location}/lib/python
scripts = zopepy


# installs paster and Zopeskel
[zopeskel]
recipe = zc.recipe.egg
eggs =
    PasteScript
    ZopeSkel


# compiles .py files in ./parts and ./products so that they don't
# need to be compiled by the daemon
# For options see http://pypi.python.org/pypi/plone.recipe.precompiler
[precompile]
recipe = plone.recipe.precompiler


# This recipe is used to set permissions -- and ownership for root mode installs
# For options see http://pypi.python.org/pypi/plone.recipe.command
[chown]
recipe = plone.recipe.command
command =
    chmod 600 .installed.cfg
    touch ${buildout:directory}/var/zeoserver/zeoserver.log
#     touch ${buildout:directory}/var/zeoserver/zeoserver-sites1.log
#     touch ${buildout:directory}/var/zeoserver/zeoserver-sites2.log
#     touch ${buildout:directory}/var/zeoserver/zeoserver-sites3.log
#     touch ${buildout:directory}/var/zeoserver/zeoserver-sites4.log
#     touch ${buildout:directory}/var/zeoserver/zeoserver-sites5.log
#     touch ${buildout:directory}/var/zeoserver/zeoserver-sites6.log
#     find ${buildout:eggs-directory} -type d -name LC_MESSAGES -exec chown -R ${client1:effective-user} \{\} \;
#     chown -R ${zeoserver:effective-user} ${buildout:directory}/var/filestorage
    chmod 700 ${buildout:directory}/var/filestorage
#     chown -R ${zeoserver:effective-user} ${buildout:directory}/var/zeoserver
    chmod 700 ${buildout:directory}/var/zeoserver
#     chown -R ${client1:effective-user} ${buildout:directory}/var/client?
#     chown ${client1:effective-user} ${buildout:directory}/parts/client?/import
chmod 700 ${buildout:directory}/var/client?
update-command = ${chown:command}


# This recipe installs the plonectl script and a few other convenience
# items.
# For options see http://pypi.python.org/pypi/plone.recipe.unifiedinstaller
[unifiedinstaller]
recipe = plone.recipe.unifiedinstaller
user = ${client1:user}
primary-port = ${client1:http-address}
sudo-command =sudo

[flash]
recipe = uwosh.recipe.flash
server_address = rtmp://flash.idea.uwosh.edu/vod
ftp_address = flash.idea.uwosh.edu
ftp_user = flashftp
ftp_password = xxxxxx
ftp_media_directory = /flash/adobe/fms/applications/vod/media

# This places limits on image and file sizes
#
[atcontenttypes-conf1]
recipe                 = plone.recipe.atcontenttypes
zope-instance-location = ${client1:location}
max-file-size          = ATImage:500kb	
                         ATFile:30mb
                         ATNewsItem:500kb
max-image-dimension    = ATNewsItem:640,400
                         ATImage:1024,1024

# [atcontenttypes-conf2]
# recipe                 = plone.recipe.atcontenttypes
# zope-instance-location = ${client2:location}
# max-file-size          = ${atcontenttypes-conf1:max-file-size}
# max-image-dimension    = ${atcontenttypes-conf1:max-image-dimension}

# [atcontenttypes-conf3]
# recipe                 = plone.recipe.atcontenttypes
# zope-instance-location = ${client3:location}
# max-file-size          = ${atcontenttypes-conf1:max-file-size}
# max-image-dimension    = ${atcontenttypes-conf1:max-image-dimension}

# [atcontenttypes-conf4]
# recipe                 = plone.recipe.atcontenttypes
# zope-instance-location = ${client4:location}
# max-file-size          = ${atcontenttypes-conf1:max-file-size}
# max-image-dimension    = ${atcontenttypes-conf1:max-image-dimension}

# [atcontenttypes-conf5]
# recipe                 = plone.recipe.atcontenttypes
# zope-instance-location = ${client5:location}
# max-file-size          = ${atcontenttypes-conf1:max-file-size}
# max-image-dimension    = ${atcontenttypes-conf1:max-image-dimension}

# [pil]
# recipe = zc.recipe.egg
# index = http://dist.repoze.org/legacy/simple/PIL/
# eggs = PIL==1.1.6

